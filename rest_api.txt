/* **********************     REST API Guidelines Followed    **************************** */

GET requests should be performed to retrieve data with the identifier after a slash in the endpoint:
 GET /v1/users/1234
 -No body should be included

POST requests should be used for two purposes:
  1. Creating a new instance in the database: POST /v1/users
  2. Updating an known instance by identifier with a partial set of instance data: POST /v1/users/1234
  NOTE: This will overwrite only the properties that are given to the server
  -Body is included

PUT requests should be used to update when all instance data is known and sent to endpoint: PUT /v1/users/1234
  NOTE: This will do a complete overwrite
  -Body is included

DELETE requests should be used to remove instances from the database: DELETE /v1/users/1234
  -No body should be included


/* *****************************     LangSnap REST API Endpoints    ******************************************* */

GET /  This is a test route that returns 'hello' with a 200 if successful

POST /v2/*  This is a test endpoint that console.logs the request body and then sends a 200 resposne

Request Body Format: No Specific Format

POST /v1/cloudinaryurltogoogle  This endpoint is used to send the cloudinary url to google for object recognition

Request Body Format: 
{
  "url":"http://cloudinaryurlhere"
}

Response Body Format: 
[
  {
    "mid":"something",
    "description":"wood",
    "score":0.823
  },...
]


GET /v1/wordnik/sentence/word/*  This endpoint allows for getting sentences that use a particular word

Request Body Format:
Request parameters include the word to query

Response Body Format: 
{
  "examples": [
    {
      "provider": {
        "name": "wordnik",
        "id": 711
      },
      "year": 1899,
      "rating": 8939.131,
      "url": "http://api.wordnik.com/v4/mid/d32e5e6e501b3f60a78301cff9b15d9d5f8dd801afa6bebe188982a42466bb5b",
      "word": "cat",
      "text": "In a subsequent passage, \"I am as melancholy as a gibb'd cat\" -- we are told that _cat_ is not the domestic animal of that name, but a contraction of _catin_, a woman of the town.",
      "title": "Famous Reviews",
      "documentId": 18094183,
      "exampleId": 1185868246
    },
    {
      "provider": {
        "name": "wordnik",
        "id": 711
      },
      "year": 1885,
      "rating": 8911.833,
      "url": "http://api.wordnik.com/v4/mid/49331abab2ce16557a91f11541f066413756bd50430c9b4b9bf024ab01d533c8",
      "word": "cat",
      "text": "For example, that familiar animal the cat is called in Guyenne _lou catou_ and even _lou cat_; but the word belongs to the Romance language, and is the same all through Languedoc and",
      "title": "Wanderings by southern waters, eastern Aquitaine",
      "documentId": 18094981,
      "exampleId": 1188445966
    }, ...
  ]
}

POST /v1/googletranslate/wordmap  This endpoint returns a wordmap with all supported translations for a word

Request Body Format:
{
  "q":"dog",
  "source":"en"
}

Response Body Format: 
{
	"en": "dog",
	"es": "perro",
	"fr": "chien",
	"de": "Hund",
	"ja": "犬",
	"ru": "собака"
}

POST /v1/googletranslate/sentence  This endpoint is used to send a word, language, and target language to get sentence translations

Request Body Format: 
{
"q":"The cat and the dog danced around the park",
"source":"en",
"target":"fr"
}

Response Body Format:
{
  "data": {
    "translations": [
      {
        "translatedText": "Le chat et le chien dansaient autour du parc"
      }
    ]
  }
}

GET /v1/oxford/sentence/word/*  This endpoint is used to get sentences from oxford for a particular word

Request Body Format: 
Request word should be put in request URL

Response Body Format:
{
  "metadata": {
    "provider": "Oxford University Press"
  },
  "results": [
    {
      "id": "napkin",
      "language": "en",
      "lexicalEntries": [
        {
          "language": "en",
          "lexicalCategory": "Noun",
          "sentences": [
            {
              "regions": [
                "New Zealand"
              ],
              "senseIds": [
                "m_en_gbus0677930.006",
                "b-en-es0031950.003"
              ],
              "text": "It belongs in the position of a table napkin, beside a plate."
            },
            {
              "regions": [
                "North American"
              ],
              "senseIds": [
                "m_en_gbus0677930.006",
                "b-en-es0031950.003"
              ],
              "text": "Frankie grabbed a napkin from the silver holder and pulled a pen out of his pocket."
            },...
          ],
          "text": "napkin"
        }
      ],
      "type": "headword",
      "word": "napkin"
    }
  ]
}

GET /v1/users/all  This endpoint is for testing only and is used to determine which users are in the database

Request Body Format: 
Request URL only

Response Body Format:
[
  {
    "id": 2,
    "facebookUsername": "JDGoedert",
    "firstName": "James",
    "lastName": "Goedert",
    "email": "james@gmail.com",
    "token": "2112asd3456",
    "nativeLang": "English",
    "learnLang": "French",
    "created_at": "2017-05-31T00:01:17.142Z",
    "updated_at": "2017-05-31T00:01:17.142Z"
  },
  {
    "id": 3,
    "facebookUsername": "zbbergma",
    "firstName": "Zachary",
    "lastName": "Bergmann",
    "email": "zachary@gmail.com",
    "token": "21345jjjj6",
    "nativeLang": "English",
    "learnLang": "German",
    "created_at": "2017-05-31T00:01:17.142Z",
    "updated_at": "2017-05-31T00:01:17.142Z"
  },...
]

GET /v1/users/auth/*/*  This endpoint is used to specify auth type and auth username to check if a user exists

Request Body Format:
No request body, should have auth type and auth username in URL request.
Auth Supported: facebook

Response Body Format: 
{}
or
{
  "id": 2,
  "facebookUsername": "JDGoedert",
  "firstName": "James",
  "lastName": "Goedert",
  "email": "james@gmail.com",
  "token": "2112asd3456",
  "nativeLang": "English",
  "learnLang": "French",
  "created_at": "2017-05-31T00:01:17.142Z",
  "updated_at": "2017-05-31T00:01:17.142Z"
}

POST /v1/users/findorcreate  This endpoint either retrieves a user if they exist, creates the user if they do not exist, or
updates the user if they do exist

Request Body Format: 
{
  "facebookUsername": "JDGoedert",
  "firstName": "James",
  "lastName": "Goedert",
  "email": "james@gmail.com",
  "token": "2112asd3456",
  "nativeLang": "English",
  "learnLang": "French"
}

Response Body Format: 
{
  "id": 2,
  "facebookUsername": "JDGoedert",
  "firstName": "James",
  "lastName": "Goedert",
  "email": "james@gmail.com",
  "token": "2112asd3456",
  "nativeLang": "English",
  "learnLang": "French",
  "created_at": "2017-05-31T00:01:17.142Z",
  "updated_at": "2017-05-31T00:01:17.142Z"
}

GET /v1/decks/deckid/1234 Used to get a single deck and all cards with information to be ready for use on front-endpoint

Request Body Format: 
N/A, id of desired deck should be added to the endpoint (in place of 1234 above)

Response Body Format: 
{
  "id": 2,
  "name": "ZBDeck",
  "stars": 0,
  "cards": [
    {
      "id": 2,
      "imgUrl": "httpZBDECK???",
      "wordMap": "{}",
      "stars": 0
    },
    {
      "id": 5,
      "imgUrl": "http???",
      "wordMap": "{}",
      "stars": 0
    }
  ]
}
This operation is to get a single deck of cards back for the user with all card info available


GET /v1/decks/all    Used to get all decks in the database with an imgUrl for each

Request Body Format: 
N/A, request is implicit of getting all decks for all users

Response Body Format: 
[
  {
    "id": 1,
    "name": "ZDeck",
    "stars": 0,
    "cards": [
      {
        "imgUrl": "httpZDECK???"
      },
      {
        "imgUrl": "httpZeBrADECK???"
      }
    ]
  }, ...
]
This operation is to get all decks from all users back. It includes a picture from a card in the 
deck to have for a background


GET /v1/decks/userid/1234    Used to request all decks that a particular user has

Request Body Format: 
N/A, id of user should be added to the endpoint (in place of 1234 above)

Response Body Format: 
[
  {
    "id": 3,
    "name": "JDeck",
    "stars": 0,
    "cards": [
      {
        "imgUrl": "httpJDECK???"
      }
    ]
  },
  {
    "id": 4,
    "name": "JJDeck",
    "stars": 0,
    "cards": [
      {
        "imgUrl": "httpJJDECK???"
      }
    ]
  }
]
This operation gets all of the decks and card info for those decks for a particular userId

POST /v1/decks/addstar  This endpoint is used to add a star to a particular deck

Request Body Format: 
{
	"deck_id":1
}

Response Body Format: 
{
	"id": 1,
	"name": "ZachDeck",
	"stars": 47,
	"created_at": "2017-06-01T17:12:08.595Z",
	"updated_at": "2017-06-02T19:48:21.082Z",
	"user_id": 3
}

POST /v1/cards/paginganswer  This endpoint is used to update the timeInterval depending on the user's response

Request Body Format: 
{
	"deck_id":1,
	"card_id":1,
	"answer":"good"   //options are: good, ok, bad
}

Response Body Format: 'Success'

GET /v1/cards/all     Used to get every card that is available in the database

Request Body Format: 
N/A, assumed app-wide search

Response Body Format:
[
  {
    "id": 1,
    "imgUrl": "httpZDECK???",
    "stars": 0
  },
  {
    "id": 2,
    "imgUrl": "httpZBDECK???",
    "stars": 0
  },
  {
    "id": 3,
    "imgUrl": "httpJDECK???",
    "stars": 0
  }
]
This operation gets all of the cards in the database for users to select/add desired cards


GET /v1/cards/deckid/1234    Used to get all cards in a specific deck for a user

Request Body Format:
N/A, deckId specified in the url

Response Body Format: 
[
  {
    "id": 2,
    "name": "ZBDeck",
    "cards": [
      {
        "id": 2,
        "imgUrl": "httpZBDECK???",
        "wordMap": "{}",
        "stars": 0,
        "deck_card": {
          "lastVisited": null,
          "timeInterval": null,
          "phrase": null
        }
      },
      {
        "id": 5,
        "imgUrl": "http???",
        "wordMap": "{}",
        "stars": 0,
        "deck_card": {
          "lastVisited": null,
          "timeInterval": null,
          "phrase": null
        }
      }
    ]
  }
]
This operation is used to query only the cards in a specific user's deck 


POST /v1/decks/new  Used to create a new deck for the user in database.

Request Body Format: 
{
  "name":"XXXX",          //String
  "id":XXXX,              //userId, Number
  "stars":XXXX            //Number
}

Response Body Format: 

{
  "id": 37,
  "name": "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJDeck",
  "user_id": 2,
  "stars": 1,
  "updated_at": "2017-05-31T01:49:07.864Z",
  "created_at": "2017-05-31T01:49:07.864Z"
}

This operation is used to by the user to create a new deck and add it to the database. The user can then add cards
as desired.



POST /v1/decks/adddecks  Used to copy multiple decks from another user to add them for a different user

Request Body Format: 
{
	"id":4,
	"decks":"[3,4]"
}

Response Body Format: 
Successfully added decks!

This operation creates many new decks for the desired user. It also finds all cards with the deckId and creates 
a new copy of each that then references the deckId of the new users new deck that was created.


POST /v1/decks/addcards       Used to add multiple cards from another

Request Body Format:
{
  "userId":XXXX,          //Number
  "deckId":XXXX,          //Number
  "cardIds":"[
    XXXX, ....            //Number
  ]"
}

Response Body Format:
200/400/500
This operation is used to add multiple cards at a time to a particular deckId of a user


POST /v1/cards/addcard     Used to create a new card object from one the user has created

Request Body Format:
{
	"user_id":1,
	"stars":0,
	"imgUrl":"http???",
	"wordMap":"{}",
	"deck_id":2
}

Response Body Format:
{
  "id": 3,
  "stars": 0,
  "wordMap": "{}",
  "imgUrl": "http???",
  "updated_at": "2017-05-25T19:17:41.675Z",
  "created_at": "2017-05-25T19:17:41.675Z"
}

This operation is used to create a new card from user pictures with translations, etc confirmed front side.


DELETE /v1/decks/1234    Used to delete a particular deck from the user account. 

Request Body Format:
N/A, id for the deck to delete should be included in the imgUrl
http://localhost:3000/v1/decks/5

Response Body Format: 
OK/Internal Server Error

This operation delete the deck of a specified id from the user's account. It also deletes all
userCardInfo instances that reference that deck.


DELETE /v1/cards/1234   Used to delete a card from the database

Request Body Format: 
card_id is provided in the url
http://localhost:3000/v1/cards/3

Response Body Format: 
OK/ Internal Server Error

This operation is used to delete a card from the database. It is cascaded, meaning 
it removes all references of the card from decks and users when run.

